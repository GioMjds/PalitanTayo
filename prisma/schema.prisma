// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SwapStatus {
  PENDING
  ACCEPTED
  COMPLETED
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  name          String
  location      String? // e.g. "Manila, Tondo" or "Cebu, Talamban"
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  items          Item[]
  swapsInitiated Swap[]    @relation("InitiatedSwaps")
  swapsReceived  Swap[]    @relation("ReceivedSwaps")
  messages       Message[]
  ratings        Rating[]

  @@index([location])
}

model Item {
  id              String   @id @default(uuid())
  title           String
  description     String?
  photos          String[] // Array of image URLs
  condition       String? // e.g. "New", "Used-Good", "Used-Fair"
  quantity        Int      @default(1)
  location_radius Int?     @default(10) // In kilometers
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  userId  String
  user    User   @relation(fields: [userId], references: [id])
  swapAsA Swap[] @relation("SwapItemA")
  swapAsB Swap[] @relation("SwapItemB")

  @@index([title])
}

model Swap {
  id         String     @id @default(uuid())
  status     SwapStatus @default(PENDING)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  // The item being offered by the initiator
  itemAId String
  itemA   Item   @relation("SwapItemA", fields: [itemAId], references: [id])

  // The item being requested from another user
  itemBId String
  itemB   Item   @relation("SwapItemB", fields: [itemBId], references: [id])

  // User who initiated the swap (owner of itemA)
  initiatorId String
  initiator   User   @relation("InitiatedSwaps", fields: [initiatorId], references: [id])

  // User who owns the requested item (owner of itemB)
  receiverId String
  receiver   User   @relation("ReceivedSwaps", fields: [receiverId], references: [id])

  messages Message[]
  ratings  Rating[]
}

model Message {
  id        String   @id @default(uuid())
  text      String
  timestamp DateTime @default(now())

  swapId String
  swap   Swap   @relation(fields: [swapId], references: [id])

  senderId String
  sender   User   @relation(fields: [senderId], references: [id])
}

model Rating {
  id         String   @id @default(uuid())
  score      Int
  comment    String?
  created_at DateTime @default(now())

  swapId String
  swap   Swap   @relation(fields: [swapId], references: [id])

  raterId String
  rater   User   @relation(fields: [raterId], references: [id])
}

