// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SwapStatus {
  PROPOSED
  COUNTERED
  WITHDRAWN
  REJECTED
  ACCEPTED
  IN_PROGRESS
  COMPLETED
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  username       String   @unique
  password       String
  name           String
  bio            String? // Short bio or description
  location       String? // e.g. "Manila, Tondo" or "Cebu, Talamban"
  profileImage   String? // URL to the user's profile image (Cloudinary)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  items          Item[]
  swapsInitiated Swap[]    @relation("InitiatedSwaps")
  swapsReceived  Swap[]    @relation("ReceivedSwaps")
  messages       Message[]
  ratings        Rating[]

  @@index([location])
}

model Item {
  id              String   @id @default(uuid())
  item_name       String
  description     String?
  item_condition  String?
  swap_demand     String?
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  userId          String
  user            User   @relation(fields: [userId], references: [id])
  images          ItemImage[]
  swapAsA         Swap[] @relation("SwapItemA")
  swapAsB         Swap[] @relation("SwapItemB")

  @@index([item_name])
}

model ItemImage {
  id              String   @id @default(uuid())
  url             String
  itemId          String
  item            Item   @relation(fields: [itemId], references: [id])
  created_at      DateTime @default(now())

  @@index([itemId])
}

model Swap {
  id              String     @id @default(uuid())
  status          SwapStatus @default(PROPOSED)
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  // The item being offered by the initiator
  itemAId         String
  itemA           Item   @relation("SwapItemA", fields: [itemAId], references: [id])

  // The item being requested from another user
  itemBId         String
  itemB           Item   @relation("SwapItemB", fields: [itemBId], references: [id])

  // User who initiated the swap (owner of itemA)
  initiatorId     String
  initiator       User   @relation("InitiatedSwaps", fields: [initiatorId], references: [id])

  // User who owns the requested item (owner of itemB)
  receiverId      String
  receiver        User   @relation("ReceivedSwaps", fields: [receiverId], references: [id])

  messages        Message[]
  ratings         Rating[]
}

model Message {
  id              String   @id @default(uuid())
  text            String
  timestamp       DateTime @default(now())

  swapId          String
  swap            Swap      @relation(fields: [swapId], references: [id])

  senderId        String
  sender          User   @relation(fields: [senderId], references: [id])
}

model Rating {
  id              String   @id @default(uuid())
  score           Int
  comment         String?
  created_at      DateTime @default(now())

  swapId          String
  swap            Swap      @relation(fields: [swapId], references: [id])

  raterId         String
  rater           User   @relation(fields: [raterId], references: [id])
}

